---
- hosts: all
  tags: fqdn
  tasks:
    - name: "Set hostname"
      ansible.builtin.hostname:
        name: "{{ fqdn }}"

- hosts: all
  roles:
    - cri.bootstrap
  tags:
    - bootstrap

- hosts: all
  gather_facts: true
  tags:
    - "always"
    - "gather_facts"

- hosts: all
  roles:
    - role: common
  tags:
    - common

- hosts: all
  roles:
    - role: cri.common
      tags:
        - common
    - role: cri.network
      tags:
        - network
  vars_files:
    - ../vars/ssh_keys.yml

- hosts: all:!ceph
  tags: node-exporter
  roles:
    - prometheus.prometheus.node_exporter

- hosts: vault
  roles:
    - ansible-community.ansible-vault
  tags: vault

- hosts: gate
  tags: ip_forward
  tasks:
    - ansible.posix.sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        sysctl_set: yes
        state: present
        reload: yes

- hosts: vpn, theater-1.magstatt.infra.mout.ch
  tags: wireguard
  tasks:
    - name: get wireguard public key
      slurp:
        src: "{{ public_key_file_path }}"
      register: wireguard_public_key
      become: true
      ignore_errors: true
    - name: write wireguard public key to vault
      community.hashi_vault.vault_kv2_write:
        path: "wireguard/{{ inventory_hostname }}"
        engine_mount_point: "mout.ch"
        data:
          public_key: "{{ wireguard_public_key['content'] | b64decode }}"
      delegate_to: localhost
      ignore_errors: true

- hosts: vpn, theater-1.magstatt.infra.mout.ch
  roles:
    - consensus.wireguard_cloud_gateway
  tags: vpn

- hosts: all
  any_errors_fatal: true
  tags: netplan
  roles:
    - role: mrlesmithjr.netplan
      become: yes

- hosts: ceph
  tags: docker
  roles:
    - cri.docker

- hosts: ceph
  tags: chrony
  roles:
    - mrlesmithjr.chrony

- hosts: ceph
  tags: cephadm
  roles:
    - cri.ceph_tools

- import_playbook: iptables.yaml

- hosts: compute-2.blotzheim.infra.mout.ch
  tags: [k3s-cache, k3s]
  tasks:
    - name: Create Partition on /dev/vdb
      parted:
        number: 1
        device: /dev/vdb
        state: present
        part_type: primary
        fs_type: ext4
      register: create_partition_result

    - name: Format Partition with ext4
      command: mkfs.ext4 /dev/vdb1
      when: create_partition_result.changed

    - name: Ensure k3s db Directory Exists
      file:
        path: "{{ k3s_db_path }}"
        state: directory
      become: yes  # Use sudo to create the directory if needed

    - name: Mount Partition to k3s directory
      mount:
        path: "{{ k3s_db_path }}"
        src: /dev/vdb1
        fstype: ext4
        state: mounted
        opts: defaults

- hosts: compute-2.blotzheim.infra.mout.ch
  tags: [k3s-data, k3s]
  vars:
    volumes:
      - storj-0
      - storj-1
      - storj-2
      - storj-3
  tasks:
    - name: Ensure data folder exist
      file:
        path: "/mnt/{{ item }}"
        state: directory
      become: yes
      loop: "{{ volumes }}"

    - name: Mount compute-2-data volume
      mount:
        path: "/mnt/{{ item }}"
        src: "/dev/disk/by-id/virtio-{{ item }}"
        state: mounted
        opts: defaults
        fstype: xfs
      loop: "{{ volumes }}"

- hosts: k3s, gate-1.ovh.infra.mout.ch, theater-1.magstatt.infra.mout.ch
  tags: k3s
  roles:
     - role: xanmanning.k3s

- hosts: gate-1.infra.mout.ch
  tags: k3s
  vars:
    k3s_release_version: latest
  roles:
     - role: xanmanning.k3s

- hosts: gate-1.blotzheim.infra.mout.ch
  tags: ddns
  roles:
    - role: maxhoesel.ddclient

# LVM
- hosts: hypervisor, theater-1.magstatt.infra.mout.ch
  tags: lvm
  roles:
    - role: mrlesmithjr.lvm

# RAID
- hosts: hypervisor
  tags: mdadm
  roles:
    - role: mrlesmithjr.mdadm

# KVM
- hosts: hypervisor
  tags: kvm
  roles:
    - role: rootmout.kvm
  vars_files:
    - ../vars/ssh_keys.yml

# GRUB
- hosts: all
  tags: grub
  roles:
    - role: robertdebock.grub

- hosts: compute-2.blotzheim.infra.mout.ch, theater-1.magstatt.infra.mout.ch
  tags: vault-operator
  tasks:
    - name: Install Python3 and pip3
      apt:
        name:
          - python3
          - python3-venv
        state: present
        update_cache: true

    - name: Create a Python virtual environment
      ansible.builtin.command:
        cmd: python3 -m venv /opt/k8s_venv
      args:
        creates: /opt/k8s_venv

    - name: Install pip in the virtual environment
      ansible.builtin.command:
        cmd: /opt/k8s_venv/bin/pip install --upgrade pip

    - name: Install Kubernetes Python client in virtual environment
      ansible.builtin.command:
        cmd: /opt/k8s_venv/bin/pip install kubernetes
      args:
        creates: /opt/k8s_venv/bin/kubernetes

    - name: Create and inject Vault operator token in k3s
      vars:
        ansible_python_interpreter: /opt/k8s_venv/bin/python
      environment:
        PATH: "/opt/k8s_venv/bin:{{ ansible_env.PATH }}"
        VIRTUAL_ENV: "/opt/k8s_venv"
      kubernetes.core.k8s:
        state: present
        kubeconfig: /etc/rancher/k3s/k3s.yaml
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: vault-secrets-operator
            namespace: vault-operator
          type: Opaque
          data:
            VAULT_TOKEN: "{{ lookup('community.hashi_vault.vault_token_create', ttl='24h', policies=['vault-secrets-operator'], validate_certs=false).auth.client_token | b64encode }}"
            VAULT_TOKEN_LEASE_DURATION: "{{ 86400 | b64encode }}"


  # tasks:
  #   - name: Install pip3
  #     apt:
  #       name: python3-pip
  #       state: present
  #       update_cache: true
  #   - name: install kubernetes python on host
  #     pip:
  #       name: kubernetes
  #       state: present
  #   - name: Create and inject vault operator token in k3s
  #     kubernetes.core.k8s:
  #       state: present
  #       kubeconfig: /etc/rancher/k3s/k3s.yaml
  #       definition:
  #         apiVersion: v1
  #         kind: Secret
  #         metadata:
  #           name: vault-secrets-operator
  #           namespace: vault-operator
  #         type: Opaque
  #         data:
  #           VAULT_TOKEN: "{{ lookup('community.hashi_vault.vault_token_create', ttl='24h', policies=['vault-secrets-operator'], validate_certs=false).auth.client_token | b64encode }}"
  #           VAULT_TOKEN_LEASE_DURATION: "{{ 86400 | b64encode }}"

- hosts: theater-1.magstatt.infra.mout.ch
  tags: folders
  tasks:
    - name: Ensure folders exist in /var/lib/volumes
      file:
        path: "/var/lib/volumes/media/{{ item }}"
        state: directory
        mode: "0777"
      loop:
        - downloads/incomplete
        - downloads/complete
        - downloads/torrents
        - movies/radarr
        - series/sonarr

- hosts: theater-1.magstatt.infra.mout.ch
  tags: k3s-secret
  tasks:
    - name: Read the kubeconfig file from the remote machine
      ansible.builtin.slurp:
        src: /etc/rancher/k3s/k3s.yaml #TODO could be variabilized
      register: k3s_kubeconfig_raw

    - name: Decode and parse the base64-encoded kubeconfig content
      set_fact:
        k3s_kubeconfig: "{{ k3s_kubeconfig_raw.content | b64decode | from_yaml }}"

    - name: Write k3s_kubeconfig to vault
      community.hashi_vault.vault_kv2_write:
        path: "k3s/{{ inventory_hostname }}"
        engine_mount_point: "mout.ch"
        data:
          ca: "{{ k3s_kubeconfig.clusters[0].cluster['certificate-authority-data'] | b64decode }}"
          cert: "{{ k3s_kubeconfig.users[0].user['client-certificate-data'] | b64decode }}"
          key: "{{ k3s_kubeconfig.users[0].user['client-key-data'] | b64decode }}"
      delegate_to: localhost
      ignore_errors: true

- hosts: theater-1.magstatt.infra.mout.ch
  tags: nfs
  roles:
    - role: mrlesmithjr.nfs-server
